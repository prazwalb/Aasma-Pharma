generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  phone         String?
  location      Json?
  role          String         @default("user") // user, pharmacy, admin
  deleteStatus  Boolean        @default(false) // Soft delete flag
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  prescriptions Prescription[] // One-to-Many with Prescriptions
  orders        Order[] // One-to-Many with Orders
  notifications Notification[] // One-to-Many with Notifications
  pharmacy      Pharmacy?
}

model Prescription {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  imageUrl     String?
  text         String?
  deleteStatus Boolean  @default(false) // Soft delete flag
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[] // One-to-Many with Orders
  status       String   @default("pending")
}

model Medicine {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  pharmacyId   Int
  pharmacy     Pharmacy        @relation(fields: [pharmacyId], references: [id])
  stock        Int
  price        Float
  deleteStatus Boolean         @default(false) // Soft delete flag
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  orders       OrderMedicine[] // Many-to-Many with Orders (via OrderMedicine)
}

model Order {
  id             Int             @id @default(autoincrement())
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  pharmacyId     Int
  pharmacy       Pharmacy        @relation(fields: [pharmacyId], references: [id])
  prescriptionId Int?
  prescription   Prescription?   @relation(fields: [prescriptionId], references: [id])
  status         String          @default("pending") // pending, confirmed, shipped, delivered
  paymentMethod  String // cash, bank transfer
  deliveryOption String // home delivery, in-store pickup
  deleteStatus   Boolean         @default(false) // Soft delete flag
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  payment        Payment? // One-to-One with Payment
  orderMedicines OrderMedicine[] // Many-to-Many with Medicines (via OrderMedicine)
}

model Pharmacy {
  id           Int        @id @default(autoincrement())
  name         String
  location     Json?
  contactInfo  Json?
  inventory    Json?
  deleteStatus Boolean    @default(false) // Soft delete flag
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  medicines    Medicine[] // One-to-Many with Medicines
  orders       Order[]
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @unique
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  order         Order    @relation(fields: [orderId], references: [id])
  amount        Float
  paymentMethod String
  status        String   @default("pending") // pending, completed
  deleteStatus  Boolean  @default(false) // Soft delete flag
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notification {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  message      String
  status       String   @default("unread") // unread, read
  deleteStatus Boolean  @default(false) // Soft delete flag
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OrderMedicine {
  orderId      Int
  order        Order    @relation(fields: [orderId], references: [id])
  medicineId   Int
  medicine     Medicine @relation(fields: [medicineId], references: [id])
  quantity     Int
  price        Float
  deleteStatus Boolean  @default(false) // Soft delete flag
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([orderId, medicineId]) // Composite primary key
}
